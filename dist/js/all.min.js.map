{"version":3,"sources":["main.js"],"names":["jobLoc","document","querySelector","jobLabelLoc","jobInputLoc","jobClearBtnLoc","cityLoc","cityListBtnLoc","cityListTitleLoc","citySelectedOptionsLoc","cityListLoc","distanceLoc","distanceListBtnLoc","distanceListTitleLoc","distanceListLoc","sectorLoc","sectorListBtnLoc","sectorListTitleLoc","sectorSelectedOptionsLoc","sectorListLoc","employmentFormLoc","employmentFormListBtnLoc","employmentFormListTitleLoc","employmentFormSelectedOptionsLoc","employmentFormListLoc","workingHoursLoc","workingHoursListBtnLoc","workingHoursListTitleLoc","workingHoursSelectedOptionsLoc","workingHoursListLoc","languageLoc","languageListBtnLoc","languageListTitleLoc","languageSelectedOptionsLoc","languageListLoc","awardedResultsLoc","recordsOnPageLoc","pagesSwitchLoc","pagesContainer","pageButtonsLoc","querySelectorAll","brancheWrapperLoc","branchesLoc","jobFormLoc","jobTypeLoc","langLoc","citiesLoc","resultsLoc","remoteLoc","remoteInputLoc","relocationLoc","relocationInputLoc","searchInputLoc","distanceInputsLoc","distanceTitleLoc","searchBtn","advancedSearchBar","advancedSearchBtn","advancedContainer","setParentIframeHeight","iframeHeight","body","scrollHeight","window","parent","postMessage","addEventListener","e","classList","add","style","opacity","display","event","target","value","remove","stopPropagation","click","removePaddingBottomToFilterList","filterList","closest","paddingBottom","boxShadow","addPaddingBottomToFilterList","dropDownListArray","forEach","elem","toggle","filteredRecordsArray_11","apiNumber","filterConfigData","apiPage","rawAPIArray","allRecordsArray","recordsNumber","firstRecordNumber","recordsOnPage","filtersON","filterBranchesList","filterJobFormList","filterJobTypeList","filterLangList","filterCountriesList","innerText","Number","dataset","distance","filterListLocArray","selectedOptionsInFilterArray","setClearBtn","index","clearBtn","filtersQuantityBtn","filtersSelectedOptions","filtersListTitle","length","el","checked","actionAfterFilterInputChange","filterParentLoc","filtersListTitleLoc","filtersSelectedOptionsLoc","indexFilter","indexOf","push","indexDeletedItem","splice","join","addListenerToFilterListsElements","createRecordBoxes","recordsArray","replaceChildren","i","borderColorClass","textColorClass","Object","keys","recruitmentType_colorOnly","recruitmentType","formaZatrudnienia","jobForm","insertAdjacentHTML","url","lang","branche","name","city","jobType","visibleRate","salaryFrom","salaryTo","remote","relocation","setPages","pagesQuantityCalc","Math","ceil","maxPageBtns","n","moveNextPagesBtns","changePage","createFilteredRecordsArray","branchesChildrenLoc","jobFormChildrenLoc","jobTypeChildrenLoc","langChildrenLoc","citiesChildrenLoc","filteredRecordsArray","selectedBranches","branche_filter","Array","from","filter","map","filteredRecordsArray_1","addFlag","selectedFiltr","selectedJobForms","filteredRecordsArray_2","selectedjobTypes","filteredRecordsArray_3","selectedLangs","language_filter","filteredRecordsArray_4","selectedCountry","filteredRecordsArray_5","location_country_filter","country","filteredRecordsArray_6","selectedCity","location_city_filter","filteredRecordsArray_7","location_distance","lati","longi","min_lati","max_lati","min_longi","max_longi","selectedDistance","parseInt","el_city","el_record","cos","PI","filteredRecordsArray_8","remote_filter","filteredRecordsArray_9","filteredRecordsArray_10","searchText","position","description","field_id","toLowerCase","search","selectedRecruitmentType","recruitmentType_filter","pagesContainerStart","dropDownBtnStart","dropDownLoc","showHideFilters","createFilterLists","relocation_visible","language_visible","remote_visible","location_visible","branche_visible","sort","a","b","localeCompare","compare","key","reduce","accumulator","allCitiesObj","concat","allCitiesArray","globActivePageNo","pageBtn","firstRecord","lastRecord","movePrevPagesBtns","activePageNo","firstDispalyedPageNo","shift","lastDispalyedPageNo","pop","getWidth","max","scrollWidth","documentElement","offsetWidth","clientWidth","getHeight","offsetHeight","clientHeight","setPagesBtnQuantity","newMaxPageBtns","filterAwarded","configFilterArray","awardedRecordsArray","property","findFlag","element","createAwardedRecordBoxes","awarded","margin","createDataForFilters","undefined","findIndex","arr_el","reworkData","parsedJobLocation","options","job_location","JSON","parse","advert","branches","language","job_type","_Widoczna_stawka","_spodziewane_wynagrodzenie_od","_spodziewane_wynagrodzenie_do","_relokacja","_rekrutacja_rodzaj","_forma_zatrudnienia","locality","parseFloat","latitude","longitude","values","getAPI","fetch","mode","headers","getAPI_2","loopOnAPI","jsonData","createRecordsObjFromAPI","createRecordsObjFromAPI_2","async","rawData","json","getConfigFilter","readConfigFilter","console","error","clearAllFiltersLoc","preventDefault"],"mappings":"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","file":"all.min.js","sourcesContent":["\"use strict\"\r\n\r\nconst jobLoc = document.querySelector(\".job\");\r\nconst jobLabelLoc = document.querySelector(\".job label\");\r\nconst jobInputLoc = document.querySelector(\".job input\");\r\nconst jobClearBtnLoc = jobLoc.querySelector(\".clear-btn\")\r\n\r\nconst cityLoc = document.querySelector(\".city\");\r\nconst cityListBtnLoc = document.querySelector(\".city .arrow-down\");\r\nconst cityListTitleLoc = document.querySelector(\".city .list-title\");\r\nconst citySelectedOptionsLoc = document.querySelector(\".city .selected-options\");\r\nconst cityListLoc = document.querySelector(\".city .list\");\r\n\r\nconst distanceLoc = document.querySelector(\".distance\");\r\nconst distanceListBtnLoc = document.querySelector(\".distance .arrow-down\");\r\nconst distanceListTitleLoc = document.querySelector(\".distance .list-title\");\r\nconst distanceListLoc = document.querySelector(\".distance .list\");\r\n\r\nconst sectorLoc = document.querySelector(\".sector\");\r\nconst sectorListBtnLoc = document.querySelector(\".sector .arrow-down\");\r\nconst sectorListTitleLoc = document.querySelector(\".sector .list-title\");\r\nconst sectorSelectedOptionsLoc = document.querySelector(\".sector .selected-options\");\r\nconst sectorListLoc = document.querySelector(\".sector .list\");\r\n\r\nconst employmentFormLoc = document.querySelector(\".employment-form\");\r\nconst employmentFormListBtnLoc = document.querySelector(\".employment-form .arrow-down\");\r\nconst employmentFormListTitleLoc = document.querySelector(\".employment-form .list-title\");\r\nconst employmentFormSelectedOptionsLoc = document.querySelector(\".employment-form .selected-options\");\r\nconst employmentFormListLoc = document.querySelector(\".employment-form .list\");\r\n\r\nconst workingHoursLoc = document.querySelector(\".working-hours\");\r\nconst workingHoursListBtnLoc = document.querySelector(\".working-hours .arrow-down\");\r\nconst workingHoursListTitleLoc = document.querySelector(\".working-hours .list-title\");\r\nconst workingHoursSelectedOptionsLoc = document.querySelector(\".working-hours .selected-options\");\r\nconst workingHoursListLoc = document.querySelector(\".working-hours .list\");\r\n\r\nconst languageLoc = document.querySelector(\".language\");\r\nconst languageListBtnLoc = document.querySelector(\".language .arrow-down\");\r\nconst languageListTitleLoc = document.querySelector(\".language .list-title\");\r\nconst languageSelectedOptionsLoc = document.querySelector(\".language .selected-options\");\r\nconst languageListLoc = document.querySelector(\".language .list\");\r\n\r\nconst awardedResultsLoc = document.querySelector(\".awarded\");\r\nconst recordsOnPageLoc = document.querySelector(\".records-on-page\");\r\nconst pagesSwitchLoc = document.querySelector(\".pages\");\r\nconst pagesContainer = document.querySelector(\".pages-container\");\r\nlet pageButtonsLoc = document.querySelectorAll(\".page\");\r\n\r\nconst brancheWrapperLoc = document.querySelector(\".sector\");\r\nconst branchesLoc = document.querySelector(\".sector ul\");\r\nconst jobFormLoc = document.querySelector(\".employment-form ul\"); \r\nconst jobTypeLoc = document.querySelector(\".working-hours ul\"); \r\nconst langLoc = document.querySelector(\".language ul\");\r\nconst citiesLoc = document.querySelector(\".city ul\");\r\nconst resultsLoc = document.querySelector(\".results\");\r\n\r\nconst remoteLoc = document.querySelector(\".remote\");\r\nconst remoteInputLoc = document.querySelector(\"#remote\");\r\nconst relocationLoc = document.querySelector(\".relocation\");\r\nconst relocationInputLoc = document.querySelector(\"#relocation\");\r\nconst searchInputLoc = document.querySelector(\".job input\");\r\n\r\nconst distanceInputsLoc = document.querySelectorAll(\".distance input\");\r\nconst distanceTitleLoc = document.querySelector(\".distance .list-title\");\r\n\r\nconst searchBtn = document.querySelector(\".search-btn\");\r\n\r\nconst advancedSearchBar = document.querySelector(\".wrapper.five\");\r\nconst advancedSearchBtn = document.querySelector(\".advanced-search-btn .arrow-down\");\r\nconst advancedContainer = document.querySelector(\".advanced-container\");\r\n\r\n// Send data from iframe to parent ///////////////////////////////////////////\r\nconst setParentIframeHeight = () => {\r\n    const iframeHeight = document.body.scrollHeight\r\n    window.parent.postMessage(iframeHeight, 'https://miroslawrup7.github.io');\r\n}\r\n\r\n// =====================\r\n\r\njobLoc.addEventListener(\"click\", (e) => {\r\n    jobLabelLoc.classList.add(\"mini\");\r\n    jobInputLoc.classList.add(\"active\");\r\n    jobClearBtnLoc.style.opacity = \"0.5\";\r\n    jobClearBtnLoc.style.display = \"flex\";\r\n})\r\n\r\njobInputLoc.addEventListener(\"blur\", (event) => {\r\n    if (!event.target.value) {\r\n        jobLabelLoc.classList.remove(\"mini\");\r\n        jobInputLoc.classList.remove(\"active\");\r\n        jobClearBtnLoc.style.opacity = \"0\";\r\n        jobClearBtnLoc.style.display = \"none\";\r\n    }\r\n})\r\n\r\njobClearBtnLoc.addEventListener(\"click\", (e) => {\r\n    e.stopPropagation()\r\n    jobInputLoc.value = \"\";\r\n    jobLabelLoc.classList.remove(\"mini\");\r\n    jobInputLoc.classList.remove(\"active\");\r\n    jobClearBtnLoc.style.opacity = \"0\";\r\n    jobClearBtnLoc.style.display = \"none\";\r\n    searchBtn.click();\r\n})\r\n\r\nconst removePaddingBottomToFilterList = (filterList) => {\r\n    filterList.closest(\".element\").style.paddingBottom = \"\";\r\n    filterList.closest(\".element\").style.boxShadow = \"\";\r\n}\r\n\r\nconst addPaddingBottomToFilterList = (filterList) => {\r\n    if (filterList.closest(\".element\").style.paddingBottom === \"\" ) {\r\n        filterList.closest(\".element\").style.paddingBottom = \"15px\";\r\n        filterList.closest(\".element\").style.boxShadow = \"0px 0px 3px rgba(0,0,0,0.1)\";\r\n    } else {\r\n        removePaddingBottomToFilterList(filterList);\r\n    }\r\n}\r\n\r\nconst dropDownListArray = [cityLoc, distanceLoc, sectorLoc, employmentFormLoc, workingHoursLoc, languageLoc]\r\n\r\ndropDownListArray.forEach((elem) => {\r\n    elem.querySelector(\".list-title\").addEventListener(\"click\", () => {\r\n        elem.querySelector(\".list\").classList.toggle(\"expand\");\r\n        elem.querySelector(\".arrow-down\").classList.toggle(\"rotate180\");\r\n        addPaddingBottomToFilterList(elem.querySelector(\".list-title\"));\r\n    })\r\n})\r\n\r\ndropDownListArray.forEach((elem) => {\r\n    elem.addEventListener(\"mouseleave\", () => {\r\n        elem.querySelector(\".list\").classList.remove(\"expand\");\r\n        elem.querySelector(\".arrow-down\").classList.remove(\"rotate180\");\r\n        removePaddingBottomToFilterList(elem.querySelector(\".list-title\"));\r\n    })\r\n})\r\n\r\nlet filterConfigData = {};\r\nlet apiPage = 1;\r\nlet rawAPIArray = [];\r\nlet allRecordsArray = [];\r\nlet recordsNumber = 0;\r\nlet firstRecordNumber = 0;\r\nlet recordsOnPage = 20;\r\nlet filtersON = false;\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterJobTypeList = [];\r\nlet filterLangList = [];\r\nlet filterCountriesList = {};\r\nlet filteredRecordsArray_11;\r\nlet apiNumber\r\n\r\n// change distance label after choose\r\ndistanceInputsLoc.forEach((elem) => {\r\n    elem.addEventListener(\"change\", () => {\r\n        distanceTitleLoc.innerText = `+${Number(elem.value)} km`;\r\n        distanceTitleLoc.dataset.distance = Number(elem.value);\r\n        searchBtn.click();\r\n    })\r\n})\r\n\r\nrecordsOnPageLoc.value = recordsOnPage;\r\n\r\nconst filterListLocArray = [cityLoc, sectorLoc, employmentFormLoc, workingHoursLoc, languageLoc];\r\nlet selectedOptionsInFilterArray = [[],[],[],[],[],[]];\r\n\r\nconst setClearBtn = () => {\r\n    filterListLocArray.forEach((elem, index) => {\r\n\r\n        // selectedOptionsInFilterArray.push([]);\r\n    \r\n        const clearBtn = elem.querySelector(\".clear-btn\");\r\n        const filtersQuantityBtn = elem.querySelector(\".filters-quantity\");\r\n        const filtersSelectedOptions = elem.querySelector(\".selected-options\");\r\n        const filtersListTitle = elem.querySelector(\".list-title\");\r\n    \r\n        clearBtn.addEventListener(\"mouseenter\", () => {\r\n            if (selectedOptionsInFilterArray[index].length !== 0) {\r\n                filtersQuantityBtn.style.opacity = \"0\";\r\n                clearBtn.style.opacity = \"1\";\r\n            }\r\n        });\r\n        \r\n        clearBtn.addEventListener(\"mouseleave\", () => {\r\n            if (selectedOptionsInFilterArray[index].length !== 0) {\r\n                filtersQuantityBtn.style.opacity = \"1\";\r\n                clearBtn.style.opacity = \"0\";\r\n            }\r\n        });\r\n    \r\n        clearBtn.addEventListener(\"click\", () => {\r\n            if (selectedOptionsInFilterArray[index].length !== 0) {\r\n                selectedOptionsInFilterArray[index] = [];\r\n                clearBtn.style.opacity = \"0\";\r\n                elem.querySelectorAll(\"input\").forEach((el) => {\r\n                    el.checked = false;\r\n                })\r\n                filtersSelectedOptions.innerText = \"\";\r\n                filtersListTitle.classList.remove(\"mini\");\r\n                filtersQuantityBtn.style.opacity = \"0\";\r\n                searchBtn.click();\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\nsetClearBtn()\r\n\r\nconst actionAfterFilterInputChange = (e) => {\r\n    const filterParentLoc = e.target.closest(\".drop-down-container\");\r\n    const filtersQuantityBtn = filterParentLoc.querySelector(\".filters-quantity\");\r\n    const filtersListTitleLoc = filterParentLoc.querySelector(\".list-title\");\r\n    const filtersSelectedOptionsLoc = filterParentLoc.querySelector(\".selected-options\");\r\n   \r\n    const indexFilter = filterListLocArray.indexOf(filterParentLoc);\r\n\r\n    if (e.target.checked) {\r\n        selectedOptionsInFilterArray[indexFilter].push(e.target.value);\r\n    } else {\r\n        const indexDeletedItem = selectedOptionsInFilterArray[indexFilter].indexOf(e.target.value);\r\n        selectedOptionsInFilterArray[indexFilter].splice(indexDeletedItem,1);\r\n    }\r\n\r\n    selectedOptionsInFilterArray[indexFilter]\r\n\r\n    if (selectedOptionsInFilterArray[indexFilter].length !== 0) {\r\n        filtersListTitleLoc.classList.add(\"mini\");\r\n        filtersQuantityBtn.style.opacity = \"1\";\r\n        filtersQuantityBtn.innerText = selectedOptionsInFilterArray[indexFilter].length;\r\n    } else {\r\n        filtersListTitleLoc.classList.remove(\"mini\");\r\n        filtersQuantityBtn.style.opacity = \"0\";\r\n    }\r\n\r\n    filtersSelectedOptionsLoc.innerText = selectedOptionsInFilterArray[indexFilter].join(\", \");\r\n    searchBtn.click();\r\n}\r\n\r\nconst addListenerToFilterListsElements = () => {\r\n    \r\n    document.querySelectorAll(\".city ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    })\r\n    \r\n    document.querySelectorAll(\".sector ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    })\r\n\r\n    document.querySelectorAll(\".employment-form ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    })\r\n\r\n    document.querySelectorAll(\".working-hours ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    })\r\n\r\n    document.querySelectorAll(\".language ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    })\r\n\r\n};\r\n\r\n// create RECORDS BOXES ///////////////////////////////////////////////\r\nconst createRecordBoxes = (recordsArray, firstRecordNumber, recordsOnPage) => {\r\n    resultsLoc.replaceChildren();\r\n\r\n    for (let i = firstRecordNumber; i < recordsOnPage; i++) {\r\n        // colouring of records by type of recruitment\r\n\r\n        if (recordsArray[i]) {\r\n            let borderColorClass = \"\";\r\n            let textColorClass = \"\";\r\n            \r\n            if (Object.keys(filterConfigData).length !== 0 && filterConfigData.recruitmentType_colorOnly.length) {\r\n                if (filterConfigData.recruitmentType_colorOnly.indexOf(\"PT\") !== -1) {\r\n                    if (recordsArray[i].recruitmentType === \"PT\") {\r\n                        borderColorClass = \"pt-border\";\r\n                        textColorClass = \"pt-text\";\r\n                    }\r\n                }\r\n\r\n                if (filterConfigData.recruitmentType_colorOnly.indexOf(\"RS\") !== -1) {\r\n                    if (recordsArray[i].recruitmentType === \"RS\") {\r\n                        borderColorClass = \"rs-border\";\r\n                        textColorClass = \"rs-text\";\r\n                    }\r\n                }\r\n\r\n                if (filterConfigData.recruitmentType_colorOnly.indexOf(\"WEW\") !== -1) {\r\n                    if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                        borderColorClass = \"wew-border\";\r\n                        textColorClass = \"wew-text\";\r\n                    }\r\n                }\r\n            } else {\r\n                if (recordsArray[i].recruitmentType === \"PT\") {\r\n                    borderColorClass = \"pt-border\";\r\n                    textColorClass = \"pt-text\";\r\n                }\r\n                if (recordsArray[i].recruitmentType === \"RS\") {\r\n                    borderColorClass = \"rs-border\";\r\n                    textColorClass = \"rs-text\";\r\n                }\r\n                if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                    borderColorClass = \"wew-border\";\r\n                    textColorClass = \"wew-text\";\r\n                }\r\n            }\r\n\r\n            let formaZatrudnienia = \"\";\r\n\r\n            if (recordsArray[i].jobForm) {\r\n                recordsArray[i].jobForm.forEach(function (elem) {\r\n                    formaZatrudnienia = formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n                });\r\n            }\r\n\r\n            resultsLoc.insertAdjacentHTML(\"beforeend\", \r\n            `<a href=\"${recordsArray[i].url }\" target=\"_blank\">\r\n                <div class=\"result ${borderColorClass}\">\r\n                    <div class=\"top\">\r\n                        <div class=\"lang\"><p>${recordsArray[i].lang}</p></div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${recordsArray[i].branche ? recordsArray[i].branche : \"\" }</div>\r\n                            <div class=\"name ${textColorClass}\">${recordsArray[i].name}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"bottom\">\r\n                        <div class=\"city-container\">\r\n                            <div class=\"city\"><img src=\"./img/location_dot.svg\">${recordsArray[i].city}</div>\r\n                        </div>\r\n                        <div class=\"details-container\">\r\n                            ${recordsArray[i].jobType ? \"<div class='jobtype'>\" + recordsArray[i].jobType + \"</div>\" : \"\"}\r\n                            ${recordsArray[i].visibleRate ? recordsArray[i].salaryFrom && recordsArray[i].salaryTo ? \"<div class='salary'>\" + recordsArray[i].salaryFrom + \" - \" + recordsArray[i].salaryTo + \"</div>\"  : \"\" : \"\"}\r\n                            ${recordsArray[i].remote ? \"<div class='remote'>zdalna</div>\" : \"\" }\r\n                            ${recordsArray[i].relocation ? \"<div class='relocation'>relocation</div>\" : \"\" }\r\n                            <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    </div>\r\n                   \r\n                </div>\r\n            </a>`\r\n            );\r\n        }\r\n    }\r\n    setParentIframeHeight()\r\n};\r\n\r\nconst setPages = (recordsNumber) => {\r\n    pagesQuantityCalc = Math.ceil(recordsNumber / recordsOnPage);\r\n\r\n    if (pagesQuantityCalc > maxPageBtns) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n=1; n <= maxPageBtns; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page active\">${n}</div>`);\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page\">${n}</div>`);\r\n            }\r\n        }\r\n        pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`);\r\n        let nextBtnLoc = document.querySelector(\".next\");\r\n        nextBtnLoc.addEventListener(\"click\", () => {\r\n            moveNextPagesBtns();\r\n        });\r\n    } else {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n=1; n <= pagesQuantityCalc; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page active\">${n}</div>`);\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page\">${n}</div>`);\r\n            }\r\n        }\r\n        pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"next\"><img src=\"\" alt=\"\" /></div>`);\r\n    }\r\n\r\n    pagesSwitchLoc.insertAdjacentHTML(\"afterbegin\",`<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`);\r\n\r\n    pageButtonsLoc = document.querySelectorAll(\".page\");\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.addEventListener(\"click\", (e) => {\r\n            changePage(e.target);\r\n        });\r\n    });\r\n    \r\n};\r\n\r\n// filter the data to create FILTERED OBJECTS ARRAY ///////////////////////////////\r\nconst createFilteredRecordsArray = () => {\r\n\r\n    const branchesChildrenLoc = branchesLoc.querySelectorAll(\"li input\");\r\n    const jobFormChildrenLoc = jobFormLoc.querySelectorAll(\"li input\");\r\n    const jobTypeChildrenLoc = jobTypeLoc.querySelectorAll(\"li input\");\r\n    const langChildrenLoc = langLoc.querySelectorAll(\"li input\");\r\n    const citiesChildrenLoc = citiesLoc.querySelectorAll(\"li input\");\r\n\r\n    let filteredRecordsArray = allRecordsArray;\r\n\r\n    // selectedBranches ////////////////\r\n    let selectedBranches = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.branche_filter.length) {\r\n        selectedBranches = filterConfigData.branche_filter;\r\n    } else {\r\n        selectedBranches = Array.from(branchesChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.checked;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n    \r\n    let filteredRecordsArray_1 = [];\r\n\r\n    if (selectedBranches.length !== 0) {\r\n        filteredRecordsArray.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedBranches.forEach((selectedFiltr) => {\r\n                if (el.branche === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_1.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_1 = filteredRecordsArray;\r\n    }\r\n\r\n    // selectedJobForms ////////////////\r\n    let selectedJobForms = [];\r\n\r\n    selectedJobForms = Array.from(jobFormChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.checked;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_2 = [];\r\n\r\n    if (selectedJobForms.length !== 0) {\r\n        filteredRecordsArray_1.forEach((el, index) => {\r\n            if (el.jobForm) {\r\n                let addFlag = false;\r\n\r\n                selectedJobForms.forEach((selectedFiltr) => {\r\n                    if (el.jobForm.indexOf(selectedFiltr) !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                });\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_2.push(el);\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_2 = filteredRecordsArray_1;\r\n    }\r\n\r\n    // selectedJobTypes ////////////////\r\n    let selectedjobTypes = Array.from(jobTypeChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.checked;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_3 = [];\r\n\r\n    if (selectedjobTypes.length !== 0) {\r\n        filteredRecordsArray_2.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedjobTypes.forEach((selectedFiltr) => {\r\n                if (el.jobType === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_3.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_3 = filteredRecordsArray_2;\r\n    }\r\n\r\n    // selectedLangs ////////////////\r\n    let selectedLangs = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.language_filter.length) {\r\n        selectedLangs = filterConfigData.language_filter\r\n    } else {\r\n        selectedLangs = Array.from(langChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.checked\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value\r\n            });\r\n    } \r\n    \r\n    let filteredRecordsArray_4 = [];\r\n\r\n    if (selectedLangs.length !== 0) {\r\n        filteredRecordsArray_3.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedLangs.forEach((selectedFiltr) => {\r\n                if (el.lang === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_4.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_4 = filteredRecordsArray_3\r\n    }\r\n\r\n    // selectedCountry ////////////////\r\n\r\n    let selectedCountry = []\r\n    let filteredRecordsArray_5 = []\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_country_filter.length) {\r\n        selectedCountry = filterConfigData.location_country_filter\r\n        filteredRecordsArray_4.forEach((el) => {\r\n            let addFlag = false\r\n\r\n            selectedCountry.forEach((selectedFiltr) => {\r\n                if (el.country === selectedFiltr) {\r\n                    addFlag = true\r\n                }\r\n            })\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_5.push(el)\r\n            }\r\n        })\r\n    } else {\r\n        filteredRecordsArray_5 = filteredRecordsArray_4\r\n    }\r\n\r\n    let filteredRecordsArray_6 = filteredRecordsArray_5\r\n\r\n    // selectedCity & selectedDistance ////////////////\r\n\r\n    let selectedCity = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_city_filter.length) {\r\n        selectedCity = filterConfigData.location_city_filter\r\n        cityLoc.style.display = \"none\"\r\n    } else {\r\n        selectedCity = Array.from(citiesChildrenLoc)\r\n        .filter(function (elem) {\r\n            if (elem.value) {\r\n                return elem.checked\r\n            }\r\n        })\r\n        .map(function (elem) {\r\n            if (elem.value) {\r\n                return elem.value\r\n            }\r\n        })\r\n    }\r\n    \r\n    let filteredRecordsArray_7 = []\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_distance !== null) {\r\n        distanceLoc.style.display = \"none\"\r\n    }\r\n\r\n    if (selectedCity.length) {\r\n        \r\n        let selectedDistance = parseInt(distanceTitleLoc.dataset.distance)\r\n\r\n        let lati\r\n        let longi\r\n        let min_lati\r\n        let max_lati\r\n        let min_longi\r\n        let max_longi\r\n\r\n        selectedCity.forEach((el_city) => {\r\n            filteredRecordsArray_6.forEach((el_record) => {\r\n                if (el_city === el_record.city) {\r\n                    lati = el_record.lati\r\n                    longi = el_record.longi\r\n                    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_distance !== null) {\r\n                        selectedDistance = filterConfigData.location_distance\r\n                        distanceLoc.style.display = \"none\"\r\n                    }\r\n                    min_lati = lati - selectedDistance * 0.009044\r\n                    max_lati = lati + selectedDistance * 0.009044\r\n                    min_longi = longi - (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180)\r\n                    max_longi = longi + (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180)\r\n                }\r\n            })\r\n\r\n            filteredRecordsArray_6.forEach((el_record) => {\r\n                if (\r\n                    el_record.lati <= max_lati &&\r\n                    el_record.lati >= min_lati &&\r\n                    el_record.longi <= max_longi &&\r\n                    el_record.longi >= min_longi\r\n                ) {\r\n                    filteredRecordsArray_7.push(el_record)\r\n                }\r\n            })\r\n        })\r\n        \r\n    } else {\r\n        filteredRecordsArray_7 = filteredRecordsArray_6\r\n    }\r\n   \r\n    // selectedRemote ////////////////\r\n\r\n    let filteredRecordsArray_8 = [];\r\n\r\n        if (remoteInputLoc.checked || filterConfigData.remote_filter) {\r\n            filteredRecordsArray_7.forEach((el) => {\r\n                let addFlag = false\r\n\r\n                if (el.remote) {\r\n                    addFlag = true\r\n                }\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_8.push(el)\r\n                }\r\n            })\r\n        \r\n        } else {\r\n            filteredRecordsArray_8 = filteredRecordsArray_7\r\n        }\r\n\r\n    // selectedRelocation ////////////////\r\n    let filteredRecordsArray_9 = []\r\n\r\n    if (relocationInputLoc.checked) {\r\n        filteredRecordsArray_8.forEach((el) => {\r\n            let addFlag = false\r\n\r\n            if (el.relocation) {\r\n                addFlag = true\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_9.push(el)\r\n            }\r\n        })\r\n    } else {\r\n        filteredRecordsArray_9 = filteredRecordsArray_8\r\n    }\r\n\r\n    // searchText ////////////////\r\n\r\n    let filteredRecordsArray_10 = []\r\n\r\n    let searchText = searchInputLoc.value\r\n\r\n    if (searchText) {\r\n        filteredRecordsArray_9.forEach((el) => {\r\n            let addFlag = false\r\n\r\n            let position\r\n\r\n            el.description.forEach(function (elem) {\r\n                if (elem.value && elem.field_id !== \"geolocation\") {\r\n                    position = elem.value\r\n                        .toLowerCase()\r\n                        .search(searchText.toLowerCase());\r\n                    if (position !== -1) {\r\n                        addFlag = true\r\n                    }\r\n                }\r\n            })\r\n\r\n            position = el.name.toLowerCase().search(searchText.toLowerCase())\r\n            if (position !== -1) {\r\n                addFlag = true\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_10.push(el)\r\n            }\r\n        })\r\n    } else {\r\n        filteredRecordsArray_10 = filteredRecordsArray_9\r\n    }\r\n\r\n    // selectedRecruitmentType (coloring of records) ////////////////\r\n\r\n    filteredRecordsArray_11 = []\r\n    \r\n    let selectedRecruitmentType = []\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.recruitmentType_filter.length) {\r\n        selectedRecruitmentType = filterConfigData.recruitmentType_filter\r\n        filteredRecordsArray_10.forEach((el) => {\r\n            let addFlag = false\r\n\r\n            selectedRecruitmentType.forEach((selectedFiltr) => {\r\n                if (el.recruitmentType === selectedFiltr) {\r\n                    addFlag = true\r\n                }\r\n            })\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_11.push(el)\r\n            }\r\n        })\r\n    }  else {\r\n        filteredRecordsArray_11 = filteredRecordsArray_10\r\n    }\r\n\r\n    recordsNumber = filteredRecordsArray_11.length\r\n\r\n    createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage)\r\n  \r\n    setPages(recordsNumber)\r\n    filtersON = true\r\n\r\n    // setParentIframeHeight()\r\n}\r\n\r\nconst pagesContainerStart = () => {\r\n    pagesContainer.classList.add(\"active\");\r\n};\r\n\r\nconst dropDownBtnStart = () => {\r\n    dropDownLoc.addEventListener(\"click\", showHideFilters);\r\n\r\n    dropDownLoc.classList.add(\"active\");\r\n};\r\n\r\n// create HTML FILTERS LISTS //////////////////////////////////////////////////////\r\nconst createFilterLists = (filterConfigData) => {\r\n\r\n    if (filterConfigData) {\r\n        if (!filterConfigData.relocation_visible) {\r\n            relocationLoc.classList.add(\"unactive\");\r\n        }\r\n    \r\n        if (!filterConfigData.language_visible) {\r\n            languageLoc.classList.add(\"unactive\");\r\n        }\r\n    \r\n        if (!filterConfigData.remote_visible) {\r\n            remoteLoc.classList.add(\"unactive\");\r\n        }\r\n    \r\n        if (!filterConfigData.location_visible) {\r\n            cityLoc.classList.add(\"unactive\");\r\n            distanceLoc.classList.add(\"unactive\");\r\n        }\r\n    \r\n        if (!filterConfigData.branche_visible) {\r\n            sectorLoc.classList.add(\"unactive\");\r\n        }\r\n    }\r\n    \r\n    if (filterBranchesList.length > 0) {\r\n        filterBranchesList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        \r\n        filterBranchesList.forEach(function (el) {\r\n            branchesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobFormList.length > 0) {\r\n        filterJobFormList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        filterJobFormList.forEach(function (el) {\r\n            jobFormLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobTypeList.length > 0) {\r\n        filterJobTypeList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        filterJobTypeList.forEach(function (el) {\r\n            jobTypeLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterLangList.length > 0) {\r\n        filterLangList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        filterLangList.forEach(function (el) {\r\n            langLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (Object.keys(filterCountriesList).length > 0) {\r\n\r\n        function compare(a, b) {\r\n            return a.city.localeCompare(b.city);\r\n        }\r\n\r\n        for (let key in filterCountriesList) {\r\n            filterCountriesList[key].sort(compare);\r\n        }\r\n\r\n        filterCountriesList = Object.keys(filterCountriesList)\r\n            .sort()\r\n            .reduce((accumulator, key) => {\r\n                accumulator[key] = filterCountriesList[key];\r\n                return accumulator;\r\n            }, {});\r\n\r\n        let allCitiesObj = [];\r\n        for (let key in filterCountriesList) {\r\n            allCitiesObj = allCitiesObj.concat(filterCountriesList[key]);\r\n        }\r\n\r\n        let allCitiesArray = [];\r\n        allCitiesObj.forEach((el) => {\r\n            allCitiesArray.push(el.city);\r\n        });\r\n\r\n        allCitiesArray.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        allCitiesArray.forEach(function (el) {\r\n            citiesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n};\r\n\r\n// PAGES /////////////////////////////////////////////////////////////\r\nlet globActivePageNo;\r\n\r\nconst changePage = (pageBtn) => {\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.classList.remove(\"active\");\r\n    });\r\n    pageBtn.classList.add(\"active\");\r\n    let firstRecord =\r\n        recordsOnPage * parseInt(pageBtn.innerText) - recordsOnPage;\r\n    let lastRecord = recordsOnPage * parseInt(pageBtn.innerText);\r\n\r\n    filtersON\r\n        ? createRecordBoxes(filteredRecordsArray_11, firstRecord, lastRecord)\r\n        : createRecordBoxes(allRecordsArray, firstRecord, lastRecord);\r\n    globActivePageNo = parseInt(pageBtn.innerText);\r\n\r\n    \r\n    // setParentIframeHeight()\r\n};\r\n\r\nconst movePrevPagesBtns = () => {\r\n    let firstDispalyedPageNo = parseInt(\r\n        Array.from(document.querySelectorAll(\".page\")).shift().innerText\r\n    );\r\n    let lastDispalyedPageNo = parseInt(\r\n        Array.from(document.querySelectorAll(\".page\")).pop().innerText\r\n    );\r\n\r\n    let activePageNo;\r\n    activePageNo = document.querySelector(\".page.active\");\r\n\r\n    if (activePageNo) {\r\n        activePageNo = parseInt(activePageNo.innerText);\r\n    }\r\n\r\n    if (firstDispalyedPageNo > 1) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n = firstDispalyedPageNo - 1; n <= lastDispalyedPageNo - 1; n++) {\r\n            if (!activePageNo) {\r\n                activePageNo = globActivePageNo;\r\n            }\r\n            if (activePageNo && n === activePageNo) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page active\">${n}</div>`\r\n                );\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page\">${n}</div>`\r\n                );\r\n            }\r\n        }\r\n\r\n        if (lastDispalyedPageNo < pagesQuantityCalc + 1) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`\r\n            );\r\n            let nextBtnLoc = document.querySelector(\".next\");\r\n            nextBtnLoc.addEventListener(\"click\", () => {\r\n                moveNextPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`\r\n            );\r\n        }\r\n\r\n        if (firstDispalyedPageNo > 2) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"afterbegin\",\r\n                `<div class=\"prev active\"><img src=\"./img/chevron-left.svg\" alt=\"\" /></div>`\r\n            );\r\n            let prevBtnLoc = document.querySelector(\".prev\");\r\n            prevBtnLoc.addEventListener(\"click\", () => {\r\n                movePrevPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"afterbegin\",\r\n                `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`\r\n            );\r\n        }\r\n\r\n        pageButtonsLoc = document.querySelectorAll(\".page\");\r\n        pageButtonsLoc.forEach((el) => {\r\n            el.addEventListener(\"click\", (e) => {\r\n                changePage(e.target);\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nconst moveNextPagesBtns = () => {\r\n    let firstDispalyedPageNo = parseInt(\r\n        Array.from(document.querySelectorAll(\".page\")).shift().innerText\r\n    );\r\n    let lastDispalyedPageNo = parseInt(\r\n        Array.from(document.querySelectorAll(\".page\")).pop().innerText\r\n    );\r\n\r\n    let activePageNo;\r\n    activePageNo = document.querySelector(\".page.active\");\r\n    if (activePageNo) {\r\n        activePageNo = parseInt(activePageNo.innerText);\r\n        globActivePageNo = activePageNo;\r\n    }\r\n\r\n    if (lastDispalyedPageNo < pagesQuantityCalc) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n = firstDispalyedPageNo + 1; n <= lastDispalyedPageNo + 1; n++) {\r\n            if (!activePageNo) {\r\n                activePageNo = globActivePageNo;\r\n            }\r\n            if (activePageNo && n === activePageNo) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page active\">${n}</div>`\r\n                );\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page\">${n}</div>`\r\n                );\r\n            }\r\n        }\r\n\r\n        if (lastDispalyedPageNo < pagesQuantityCalc - 1) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`\r\n            );\r\n            let nextBtnLoc = document.querySelector(\".next\");\r\n            nextBtnLoc.addEventListener(\"click\", () => {\r\n                moveNextPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`\r\n            );\r\n        }\r\n\r\n        if (firstDispalyedPageNo > 0) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"afterbegin\",\r\n                `<div class=\"prev active\"><img src=\"./img/chevron-left.svg\" alt=\"\" /></div>`\r\n            );\r\n            let prevBtnLoc = document.querySelector(\".prev\");\r\n            prevBtnLoc.addEventListener(\"click\", () => {\r\n                movePrevPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"afterbegin\",\r\n                `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`\r\n            );\r\n        }\r\n\r\n        pageButtonsLoc = document.querySelectorAll(\".page\");\r\n        pageButtonsLoc.forEach((el) => {\r\n            el.addEventListener(\"click\", (e) => {\r\n                changePage(e.target);\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\n// RWD /////////////////////////////////////////////////////////////\r\nfunction getWidth() {\r\n    return Math.max(\r\n        document.body.scrollWidth,\r\n        document.documentElement.scrollWidth,\r\n        document.body.offsetWidth,\r\n        document.documentElement.offsetWidth,\r\n        document.documentElement.clientWidth\r\n    );\r\n}\r\n\r\nfunction getHeight() {\r\n    return Math.max(\r\n        document.body.scrollHeight,\r\n        document.documentElement.scrollHeight,\r\n        document.body.offsetHeight,\r\n        document.documentElement.offsetHeight,\r\n        document.documentElement.clientHeight\r\n    );\r\n}\r\n\r\nlet pagesQuantityCalc;\r\n\r\nlet maxPageBtns;\r\n\r\nconst setPagesBtnQuantity = () => {\r\n\r\nlet newMaxPageBtns;\r\n\r\n    if (getWidth() < 500) {newMaxPageBtns = 3}\r\n    if (getWidth() >= 500 && getWidth() < 650) {newMaxPageBtns = 3}\r\n    if (getWidth() >= 650 && getWidth() < 750) {newMaxPageBtns = 4}\r\n    if (getWidth() >= 750 && getWidth() < 950) {newMaxPageBtns = 7}\r\n    if (getWidth() >= 950 && getWidth() < 1200) {newMaxPageBtns = 12}\r\n    if (getWidth() >= 1200) {newMaxPageBtns = 15}\r\n\r\n    if (newMaxPageBtns !== maxPageBtns) {\r\n        maxPageBtns = newMaxPageBtns\r\n        setPages(recordsNumber);\r\n    }\r\n}\r\n\r\nwindow.addEventListener(\"resize\", () => {\r\n    setPagesBtnQuantity();\r\n});\r\n\r\nsetPagesBtnQuantity();\r\n\r\nconst filterAwarded = (configFilterArray, awardedRecordsArray, property) => {\r\n    \r\n    for (let i = awardedRecordsArray.length-1; i>=0; i--) {\r\n\r\n        let findFlag = false;\r\n        configFilterArray.forEach((element)=>{\r\n          \r\n            if (awardedRecordsArray[i][property] === element) {\r\n                findFlag = true;\r\n            }\r\n        })\r\n\r\n        if (!findFlag) {\r\n            awardedRecordsArray.splice(i, 1)\r\n        }\r\n    }\r\n}\r\n\r\n// create AWARDED RECORDS BOXES ///////////////////////////////////////////////\r\nconst createAwardedRecordBoxes = (recordsArray, filterConfigData) => {\r\n\r\n    awardedResultsLoc.replaceChildren();\r\n\r\n    let awardedRecordsArray = recordsArray.filter((elem) => {\r\n        return elem.awarded;  \r\n    });\r\n\r\n    if (awardedRecordsArray.length > 0) {\r\n\r\n        if (filterConfigData) {\r\n\r\n            if (filterConfigData.remote_filter) {\r\n                awardedRecordsArray = awardedRecordsArray.filter((elem) => {\r\n                    return elem.remote;\r\n                });\r\n            }\r\n            \r\n            if (filterConfigData.language_filter.length > 0) {\r\n                filterAwarded(filterConfigData.language_filter, awardedRecordsArray, \"lang\");\r\n            }\r\n\r\n            if (filterConfigData.branche_filter.length > 0) {\r\n                filterAwarded(filterConfigData.branche_filter, awardedRecordsArray, \"branche\");\r\n            }\r\n\r\n            if (filterConfigData.location_country_filter.length > 0) {\r\n                filterAwarded(filterConfigData.location_country_filter, awardedRecordsArray, \"country\");\r\n            }\r\n\r\n            if (filterConfigData.location_city_filter.length > 0) {\r\n                filterAwarded(filterConfigData.location_city_filter, awardedRecordsArray, \"city\");\r\n            }\r\n\r\n            if (filterConfigData.recruitmentType_filter.length > 0) {\r\n                filterAwarded(filterConfigData.recruitmentType_filter, awardedRecordsArray, \"recruitmentType\");\r\n            }\r\n\r\n        }\r\n\r\n        for (let i = firstRecordNumber; i < 10; i++) {\r\n            if (awardedRecordsArray[i]) {\r\n                let borderColorClass = \"\";\r\n                let textColorClass = \"\";\r\n\r\n                if (awardedRecordsArray[i].recruitmentType === \"PT\") {\r\n                    borderColorClass = \"pt-border\";\r\n                    textColorClass = \"pt-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"RS\") {\r\n                    borderColorClass = \"rs-border\";\r\n                    textColorClass = \"rs-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"WEW\") {\r\n                    borderColorClass = \"wew-border\";\r\n                    textColorClass = \"wew-text\";\r\n                }\r\n\r\n                let formaZatrudnienia = \"\";\r\n\r\n                if (awardedRecordsArray[i].jobForm) {\r\n                    awardedRecordsArray[i].jobForm.forEach(function (elem) {\r\n                        formaZatrudnienia =\r\n                            formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n                    });\r\n                }\r\n\r\n                awardedResultsLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<a href=\"${\r\n                        awardedRecordsArray[i].url\r\n                    }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n                <div class=\"top\">\r\n                \r\n                        <div class=\"lang\">\r\n                            <p>${awardedRecordsArray[i].lang}</p>\r\n                        </div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${\r\n                                awardedRecordsArray[i].branche\r\n                                    ? awardedRecordsArray[i].branche\r\n                                    : \"\"\r\n                            }</div>\r\n                            <div class=\"name ${textColorClass}\">${\r\n                        awardedRecordsArray[i].name\r\n                    }</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"bottom\">\r\n                    <div class=\"city-container\">\r\n                        <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                            awardedRecordsArray[i].city\r\n                        }</div></div>\r\n                        <div class=\"details-container\">\r\n                        ${\r\n                            awardedRecordsArray[i].remote\r\n                                ? \"<div class='remote'>zdalna</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].relocation\r\n                                ? \"<div class='relocation'>relocation</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].jobType\r\n                                ? \"<div class='jobtype'>\" +\r\n                                awardedRecordsArray[i].jobType +\r\n                                \"</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].visibleRate\r\n                                ? awardedRecordsArray[i].salaryFrom &&\r\n                                awardedRecordsArray[i].salaryTo\r\n                                    ? \"<div class='salary'>\" +\r\n                                    awardedRecordsArray[i].salaryFrom +\r\n                                    \" - \" +\r\n                                    awardedRecordsArray[i].salaryTo +\r\n                                    \"</div>\"\r\n                                    : \"\"\r\n                                : \"\"\r\n                        }\r\n                        <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"ribbon-wrap\">\r\n                        <div class=\"ribbon\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n\r\n            </div></a>`\r\n                );\r\n            }\r\n        }\r\n    } else {\r\n        awardedResultsLoc.style.margin = \"0\"\r\n    }\r\n}\r\n\r\n// show RECORDS NUMBER ///////////////////////////////////////////////\r\n// const summariseDownload = (recordsNumber) => {\r\n//     recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n//     if (!recordsNumber) {\r\n//         noResultsLoc.classList.add(\"active\");\r\n//     } else {\r\n//         noResultsLoc.classList.remove(\"active\");\r\n//     }\r\n// }\r\n\r\n// create FILTER DATA from API data ///////////////////////////////////////////////\r\nconst createDataForFilters = (\r\n    branche,\r\n    jobForm,\r\n    jobType,\r\n    lang,\r\n    visibleRate,\r\n    salaryFrom,\r\n    salaryTo,\r\n    country,\r\n    city,\r\n    lati,\r\n    longi\r\n) => {\r\n\r\n    // BranchesList\r\n   \r\n    if (filterBranchesList.indexOf(branche) === -1 && branche !== undefined) {\r\n        if (Object.keys(filterConfigData).length !== 0 && filterConfigData.branche_filter.length) {\r\n            if (filterConfigData.branche_filter.indexOf(branche) !== -1) {\r\n                filterBranchesList.push(branche)\r\n            }\r\n        } else {\r\n            filterBranchesList.push(branche)\r\n        }\r\n    }\r\n\r\n    // JobFormList\r\n\r\n    if (jobForm) {\r\n        jobForm.forEach((elem) => {\r\n            if (filterJobFormList.indexOf(elem) === -1) {\r\n                filterJobFormList.push(elem)\r\n            }\r\n        })\r\n    }\r\n\r\n    // JobTypeList\r\n\r\n    if (filterJobTypeList.indexOf(jobType) === -1 && jobType !== undefined) {\r\n        filterJobTypeList.push(jobType)\r\n    }\r\n\r\n    // LangList\r\n\r\n    if (filterLangList.indexOf(lang) === -1) {\r\n        if (Object.keys(filterConfigData).length !== 0) {\r\n            if (filterConfigData.language_filter.length) {\r\n                if (filterConfigData.language_filter.indexOf(lang) !== -1) {\r\n                    filterLangList.push(lang)\r\n                }\r\n            } else {\r\n                filterLangList.push(lang)\r\n            }\r\n        } else {\r\n            filterLangList.push(lang)\r\n        }\r\n    }\r\n\r\n    // CountriesList\r\n\r\n    if (Object.keys(filterConfigData).length !== 0) {\r\n        if (!filterCountriesList[country]) {\r\n            filterCountriesList[country] = []\r\n        }\r\n        if (filterConfigData.location_city_filter.length) {\r\n            if (filterConfigData.location_city_filter.indexOf(city) !== -1) {\r\n                filterCountriesList[country].push({\r\n                    city: city,\r\n                    lati: lati,\r\n                    longi: longi,\r\n                });\r\n            }\r\n        } else if (filterConfigData.location_country_filter.length) {\r\n            if (filterConfigData.location_country_filter.indexOf(country) !== -1) {\r\n                filterCountriesList[country].push({\r\n                    city: city,\r\n                    lati: lati,\r\n                    longi: longi,\r\n                });\r\n            }\r\n        } else {\r\n            if (filterCountriesList[country].findIndex((arr_el) => arr_el.city === city) === -1) {\r\n                filterCountriesList[country].push({\r\n                    city: city,\r\n                    lati: lati,\r\n                    longi: longi,\r\n                });\r\n            }\r\n        }\r\n    } else {\r\n        if (!filterCountriesList[country]) {\r\n            filterCountriesList[country] = []\r\n        }\r\n        if (filterCountriesList[country].findIndex((arr_el) => arr_el.city === city) === -1) {\r\n            filterCountriesList[country].push({\r\n                city: city,\r\n                lati: lati,\r\n                longi: longi,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// create OBJECTS ARRAY from Raw API JSON ///////////////////////////////////////////////\r\nconst reworkData = (rawAPIArray) => {\r\n    rawAPIArray.forEach((el) => {\r\n\r\n        let parsedJobLocation;\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n        }\r\n\r\n        allRecordsArray.push({\r\n            url: el.url,\r\n            name: el.advert.name,\r\n            branche: el.options.branches,\r\n            lang: el.advert.language,\r\n            jobType: el.options.job_type,\r\n            visibleRate: parseInt(el.options._Widoczna_stawka),\r\n            salaryFrom: parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            salaryTo: parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            remote: el.options.remote,\r\n            relocation: el.options._relokacja,\r\n            recruitmentType: el.options._rekrutacja_rodzaj,\r\n            jobForm: el.options._forma_zatrudnienia,\r\n            country: parsedJobLocation.country,\r\n            city: parsedJobLocation.locality,\r\n            lati: parseFloat(parsedJobLocation.latitude),\r\n            longi: parseFloat(parsedJobLocation.longitude),\r\n            description: el.advert.values,\r\n            awarded: el.awarded,\r\n        });\r\n\r\n        createDataForFilters(\r\n            el.options.branches,\r\n            el.options._forma_zatrudnienia,\r\n            el.options.job_type,\r\n            el.advert.language,\r\n            parseInt(el.options._Widoczna_stawka),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            parsedJobLocation.country,\r\n            parsedJobLocation.locality,\r\n            parseFloat(parsedJobLocation.latitude),\r\n            parseFloat(parsedJobLocation.longitude)\r\n        );\r\n    });\r\n}\r\n\r\n// gets DATA FROM API ///////////////////////////////////////////////\r\nconst getAPI = (apiPage) => {\r\n    const response = fetch(\r\n        \"https://grupaprogres.traffit.com/public/job_posts/published\",\r\n        {\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-Request-Page-Size\": \"100\",\r\n                \"X-Request-Current-Page\": apiPage,\r\n                \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n            },\r\n        }\r\n    );\r\n\r\n    return response;\r\n}\r\n\r\n// gets DATA FROM API 2 ///////////////////////////////////////////////\r\nconst getAPI_2 = (apiPage) => {\r\n    const response = fetch(\r\n        \"https://rsgrupaprogres.traffit.com/public/job_posts/published\",\r\n        {\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-Request-Page-Size\": \"100\",\r\n                \"X-Request-Current-Page\": apiPage,\r\n                \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n            },\r\n        }\r\n    );\r\n\r\n    return response;\r\n}\r\n\r\nconst loopOnAPI = (jsonData, filterConfigData) => {\r\n    if (jsonData.length > 0 && apiNumber === 1) {\r\n        rawAPIArray = rawAPIArray.concat(jsonData)\r\n        apiPage++\r\n        createRecordsObjFromAPI(apiPage, filterConfigData)\r\n    } else if (jsonData.length === 0  && apiNumber === 1) {\r\n        apiPage = 1\r\n        createRecordsObjFromAPI_2(apiPage, filterConfigData)\r\n    } else if (jsonData.length > 0  && apiNumber === 2) {\r\n        rawAPIArray = rawAPIArray.concat(jsonData)\r\n        apiPage++\r\n        createRecordsObjFromAPI_2(apiPage, filterConfigData)\r\n    } else {\r\n        reworkData(rawAPIArray)\r\n        recordsNumber = rawAPIArray.length\r\n        createAwardedRecordBoxes(allRecordsArray, filterConfigData)\r\n        setPages(recordsNumber)\r\n        createFilterLists(filterConfigData)\r\n        addListenerToFilterListsElements()\r\n        createFilteredRecordsArray()\r\n        distanceInputsLoc.forEach((elem) => {\r\n            elem.checked = false\r\n        })\r\n        jobInputLoc.value = \"\"\r\n    }\r\n}\r\n\r\nasync function createRecordsObjFromAPI(apiPage, filterConfigData) {\r\n    apiNumber = 1\r\n    const rawData = await getAPI(apiPage)\r\n    const jsonData = await rawData.json()\r\n    loopOnAPI(jsonData, filterConfigData)\r\n}\r\n\r\nasync function createRecordsObjFromAPI_2(apiPage, filterConfigData) {\r\n    apiNumber = 2\r\n    const rawData = await getAPI_2(apiPage)\r\n    const jsonData = await rawData.json()\r\n    loopOnAPI(jsonData, filterConfigData)\r\n}\r\n\r\n// consider configuration filters ////////////////////////\r\nconst getConfigFilter = () => {\r\n    const response = fetch(\"./config/config.json\");\r\n    return response;\r\n}\r\n\r\nasync function readConfigFilter() {\r\n    try {\r\n        const rawData = await getConfigFilter();\r\n        filterConfigData = await rawData.json();\r\n        createRecordsObjFromAPI(apiPage, filterConfigData);\r\n    } catch (e) {\r\n        console.error(e);\r\n        createRecordsObjFromAPI(apiPage);\r\n    }\r\n}\r\n\r\nreadConfigFilter();\r\n\r\n// change RECORDS QUANTITY ON PAGE //////////////////////////////////////////////////\r\nrecordsOnPageLoc.addEventListener(\"change\", (e) => {\r\n    recordsOnPage = parseInt(e.target.value);\r\n\r\n    filtersON\r\n        ? createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage)\r\n        : createRecordBoxes(allRecordsArray, 0, recordsOnPage);\r\n    setPages(recordsNumber);\r\n\r\n    // setParentIframeHeight()\r\n})\r\n\r\n// SEARCH LISTENER /////////////////////////////////////////////////////////////\r\nsearchBtn.addEventListener(\"click\", createFilteredRecordsArray);\r\n\r\nadvancedSearchBar.addEventListener(\"click\", () => {\r\n    advancedContainer.classList.toggle(\"showed\");\r\n    advancedSearchBtn.classList.toggle(\"rotate180\");\r\n    setParentIframeHeight()\r\n})\r\n\r\nconst clearAllFiltersLoc = document.querySelector(\".clear-all-filters\")\r\n\r\nclearAllFiltersLoc.addEventListener(\"click\", () => {\r\n\r\n    filterListLocArray.forEach((elem, index) => {\r\n\r\n        const clearBtn = elem.querySelector(\".clear-btn\");\r\n        const filtersQuantityBtn = elem.querySelector(\".filters-quantity\");\r\n        const filtersSelectedOptions = elem.querySelector(\".selected-options\");\r\n        const filtersListTitle = elem.querySelector(\".list-title\");\r\n\r\n        selectedOptionsInFilterArray[index] = [];\r\n        clearBtn.style.opacity = \"0\";\r\n        elem.querySelectorAll(\"input\").forEach((el) => {\r\n            el.checked = false;\r\n        })\r\n        filtersSelectedOptions.innerText = \"\";\r\n        filtersListTitle.classList.remove(\"mini\");\r\n        filtersQuantityBtn.style.opacity = \"0\";\r\n    })\r\n\r\n    jobInputLoc.value = \"\";\r\n    jobLabelLoc.classList.remove(\"mini\");\r\n    jobInputLoc.classList.remove(\"active\");\r\n    jobClearBtnLoc.style.opacity = \"0\";\r\n    jobClearBtnLoc.style.display = \"none\";\r\n\r\n    distanceLoc.querySelectorAll(\"input\").forEach((elem) => {\r\n        elem.checked = false;\r\n    })\r\n    distanceListTitleLoc.innerText = \"+0 km\";\r\n    createFilteredRecordsArray();\r\n});\r\n\r\njobInputLoc.addEventListener(\"keypress\", (event) => {\r\n    if (event.key === \"Enter\") {\r\n      event.preventDefault();\r\n      searchBtn.click();\r\n    }\r\n});\r\n\r\njobInputLoc.addEventListener(\"blur\", () => {\r\n    if (jobInputLoc.value !== \"\") {\r\n        searchBtn.click();\r\n    }\r\n});\r\n\r\njobInputLoc.addEventListener(\"input\", () => {\r\n    if (jobInputLoc.value === \"\") {\r\n      searchBtn.click();\r\n    }\r\n});\r\n\r\nremoteInputLoc.addEventListener(\"change\", () => {\r\n    searchBtn.click();\r\n})\r\n\r\nrelocationInputLoc.addEventListener(\"change\", () => {\r\n    searchBtn.click();\r\n})\r\n\r\n"]}